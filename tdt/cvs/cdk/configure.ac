AC_INIT([tufsbox-cdk],[0])
AC_PREREQ(2.59)

AC_CANONICAL_HOST
host_arch=`which arch > /dev/null 2>&1 && arch || uname -m`
AC_SUBST(host_arch)
AC_CANONICAL_BUILD
AC_SUBST(build)
if test "$target_alias" = "" ; then
	target_alias="sh4-linux"
fi
AC_CANONICAL_TARGET
if test "$target" = "sh4-unknown-linux-gnu" ; then
	target="sh4-linux"
fi
AC_SUBST(target)

AM_INIT_AUTOMAKE([])
AM_MAINTAINER_MODE

AC_PROG_CC

AC_ARG_ENABLE(player179,
	AS_HELP_STRING(--enable-player179,	set up the CDK to use player179),
	[case "${enableval}" in
		yes) PLAYER179=player179 ;;
	esac],[enable_player179=no])
AM_CONDITIONAL(ENABLE_PLAYER179,test "$enable_player179" = "yes")
AC_SUBST(PLAYER179)

AC_ARG_ENABLE(player191,
	AS_HELP_STRING(--enable-player191,	set up the CDK to use player191),
	[case "${enableval}" in
		yes) PLAYER191=player191 ;;
	esac],[enable_player191=no])
AM_CONDITIONAL(ENABLE_PLAYER191,test "$enable_player191" = "yes")
AC_SUBST(PLAYER191)

AC_ARG_ENABLE(multicom322,
	AS_HELP_STRING(--enable-multicom322, set up the CDK to use multicom322),
	[case "${enableval}" in
		yes) MULTICOM322=multicom322 ;;
	esac],[enable_multicom322=no])
AM_CONDITIONAL(ENABLE_MULTICOM322,test "$enable_multicom322" = "yes")
AC_SUBST(MULTICOM322)

AC_ARG_ENABLE(multicom324,
	AS_HELP_STRING(--enable-multicom324, set up the CDK to use multicom324),
	[case "${enableval}" in
		yes) MULTICOM324=multicom324 ;;
	esac],[enable_multicom324=no])
AM_CONDITIONAL(ENABLE_MULTICOM324,test "$enable_multicom324" = "yes")
AC_SUBST(MULTICOM324)

AC_ARG_ENABLE(stm24,
	AS_HELP_STRING(--enable-stm24,	set up the CDK to use the STLinux 2.4),
	,[enable_stm24=no])
AM_CONDITIONAL(STM24,test "$enable_stm24" = "yes")

AC_ARG_ENABLE(py27,
	AS_HELP_STRING(--enable-py27,      enable Python 2.7 ),
	[case "${enableval}" in
		yes) PY27=py27 ;;
	esac],[enable_py27=no])
AM_CONDITIONAL(ENABLE_PY27,test "$enable_py27" = "yes")
AC_SUBST(PY27)

AC_ARG_ENABLE(p0207,
	AS_HELP_STRING(--enable-p0207,  set up the CDK to use the STLinux 2.4 with patchlevel 0207),
	[case "${enableval}" in
		yes) P0207=p0207 ;;
	esac], [enable_p0207=no])
AM_CONDITIONAL(ENABLE_P0207,test "$enable_p0207" = "yes")
AC_SUBST(P0207)

AC_ARG_ENABLE(p0209,
	AS_HELP_STRING(--enable-p0209,  set up the CDK to use the STLinux 2.4 with patchlevel 0209),
	[case "${enableval}" in
		yes) P0209=p0209 ;;
	esac], [enable_p0209=no])
AM_CONDITIONAL(ENABLE_P0209,test "$enable_p0209" = "yes")
AC_SUBST(P0209)

AC_ARG_ENABLE(p0210,
	AS_HELP_STRING(--enable-p0210,  set up the CDK to use the STLinux 2.4 with patchlevel 0210),
	[case "${enableval}" in
		yes) P0210=p0210 ;;
	esac], [enable_p0210=no])
AM_CONDITIONAL(ENABLE_P0210,test "$enable_p0210" = "yes")
AC_SUBST(P0210)

AC_ARG_ENABLE(p0211,
	AS_HELP_STRING(--enable-p0211,  set up the CDK to use the STLinux 2.4 with patchlevel 0211),
	[case "${enableval}" in
		yes) P0211=p0211 ;;
	esac], [enable_p0211=no])
AM_CONDITIONAL(ENABLE_P0211,test "$enable_p0211" = "yes")
AC_SUBST(P0211)

AC_ARG_ENABLE(debug,
	AS_HELP_STRING(--enable-debug,	set up the CDK to use debug kernel configs),
	,[enable_debug=no])
AM_CONDITIONAL(DEBUG,test "$enable_debug" = "yes")

AC_ARG_WITH(cpu,
	[  --with-cpu=MODEL        cpu model [[sh4]]],
	[CPU_MODEL="$withval"],[CPU_MODEL="sh4"])
AC_SUBST(CPU_MODEL)

AC_ARG_WITH(assume-kernelsources-old,
	[  --with-assume-kernelsources-old	Do not recompile due to new kernel sources],
	[assume_kernelsources_old="yes"],[assume_kernelsources_old="no"])
AM_CONDITIONAL(ASSUME_KERNELSOURCES_OLD,test "$assume_kernelsources_old" = "yes")

AC_ARG_ENABLE(mediafwgstreamer,
	AS_HELP_STRING(--enable-mediafwgstreamer,	set up the CDK to use mediafw gstreamer),
	,[enable_mediafwgstreamer=no])
AM_CONDITIONAL(ENABLE_MEDIAFWGSTREAMER,test "$enable_mediafwgstreamer" = "yes")
AC_SUBST(MEDIAFWGSTREAMER)

AC_ARG_ENABLE(graphicfwdirectfb,
	AS_HELP_STRING(--enable-graphicfwdirectfb,	set up the CDK to use graphicfw directfb),
	,[enable_graphicfwdirectfb=no])
AM_CONDITIONAL(ENABLE_GRAPHICFWDIRECTFB,test "$enable_graphicfwdirectfb" = "yes")
AC_SUBST(GRAPHICFWDIRECTFB)

AC_ARG_ENABLE(externallcd,
	AS_HELP_STRING(--enable-externallcd,	set up the CDK to use graphlcd),
	,[enable_externallcd=no])
AM_CONDITIONAL(ENABLE_EXTERNALLCD,test "$enable_externallcd" = "yes")
AC_SUBST(EXTERNALLCD)

if test "$enable_externallcd" != "yes"  ; then
    AC_DEFINE(NO_LCD,1,[disable all lcd])
fi

if test -z "$CFLAGS" ; then
	CFLAGS="-g -O2"
fi
# CFLAGS="-g -O2 -fno-strict-aliasing"
if test -z "$TARGET_CFLAGS" -o -z "$TARGET_CXXFLAGS"; then
	TARGET_CFLAGS="-O2"
	if test "$enable_flashrules" != "yes"; then
		TARGET_CFLAGS="$TARGET_CFLAGS"
		TARGET_LDFLAGS=""
	else
		TARGET_CFLAGS="$TARGET_CFLAGS"
		TARGET_LDFLAGS=""
	fi
	TARGET_CXXFLAGS="$TARGET_CFLAGS"
fi

AC_ARG_ENABLE(lirc,
	AS_HELP_STRING(--enable-lirc,	include lirc in yadds and images),
	[case "${enableval}" in
		yes) LIRC=lirc ;;
	esac], [enable_lirc=no])
AM_CONDITIONAL(ENABLE_LIRC,test "$enable_lirc" = "yes")
AC_SUBST(LIRC)

AC_ARG_ENABLE(xfs,
	AS_HELP_STRING(--enable-xfs,    include xfs drivers in yauds and images),
	[case "${enableval}" in
		yes) XFSPROGS=xfsprogs ;;
	esac],[enable_xfs=no])
AM_CONDITIONAL(ENABLE_XFS,test "$enable_xfs" = "yes")
AC_SUBST(XFSPROGS)

AC_ARG_ENABLE(ntfs,
	AS_HELP_STRING(--enable-ntfs,    include ntfs drivers in yauds and images),
	[case "${enableval}" in
		yes) NTFS=ntfs ;;
	esac],[enable_ntfs=no])
AM_CONDITIONAL(ENABLE_NTFS,test "$enable_ntfs" = "yes")
AC_SUBST(NTFS)

AC_ARG_ENABLE(nfsserver,
	AS_HELP_STRING(--enable-nfsserver,      enable NFS server),
	[case "${enableval}" in
		yes) NFSSERVER=nfs-utils ;;
	esac],[enable_nfsserver=no])
AM_CONDITIONAL(ENABLE_NFSSERVER,test "$enable_nfsserver" = "yes")
AC_SUBST(NFSSERVER)

AC_ARG_ENABLE(cifs,
	AS_HELP_STRING(--enable-cifs,    enable the samba clients),
	[case "${enableval}" in
		yes) CIFS=samba ;;
	esac],[enable_cifs=no])
AM_CONDITIONAL(ENABLE_CIFS,test "$enable_cifs" = "yes")
AC_SUBST(CIFS)

AC_ARG_ENABLE(sg3,
	AS_HELP_STRING(--enable-sg3,    enable the sg3-utils),
	[case "${enableval}" in
		yes) SG3=sg3_utils ;;
	esac],[enable_sg3=no])
AM_CONDITIONAL(ENABLE_SG3,test "$enable_sg3" = "yes")
AC_SUBST(SG3)

AC_ARG_ENABLE(var,
	AS_HELP_STRING(--enable-var,    move stock and libs into var),
	[case "${enableval}" in
		yes) VAR=var ;;
	esac],[enable_var=no])
AM_CONDITIONAL(ENABLE_VAR,test "$enable_var" = "yes")
AC_SUBST(VAR)

AC_ARG_WITH(rootpartitionsize,
	[  --with-rootpartitionsize=SIZE	size of the root partition],
	[ROOT_PARTITION_SIZE="$withval"],[ROOT_PARTITION_SIZE="0x240000"])
AC_SUBST(ROOT_PARTITION_SIZE)

AC_ARG_WITH(datapartitionsize,
	[  --with-datapartitionsize=SIZE	size of the data partition],
	[DATA_PARTITION_SIZE="$withval"],[DATA_PARTITION_SIZE="0x400000"])
AC_SUBST(DATA_PARTITION_SIZE)

AC_ARG_ENABLE(ccache,
	AS_HELP_STRING(--enable-ccache,	enable ccache),
	[case "${enableval}" in
		yes) CCACHE_BIN=ccache;;
	esac], [enable_ccache=no])
AM_CONDITIONAL(ENABLE_CCACHE,test "$enable_ccache" = "yes")
AC_SUBST(CCACHE_BIN)

AC_ARG_ENABLE(hl101,
	AS_HELP_STRING(--enable-hl101,    enable spider box hl101 stuff),
	[case "${enableval}" in
		yes) HL101=hl101 ;;
	esac],[enable_hl101=no])
AM_CONDITIONAL(ENABLE_HL101,test "$enable_hl101" = "yes")
AC_SUBST(HL101)

AC_ARG_ENABLE(spark,
	AS_HELP_STRING(--enable-spark,    enable spark),
	[case "${enableval}" in
		yes) SPARK=spark ;;
	esac],[enable_spark=no])
AM_CONDITIONAL(ENABLE_SPARK,test "$enable_spark" = "yes")
AC_SUBST(SPARK)

AC_ARG_ENABLE(spark7162,
	AS_HELP_STRING(--enable-spark7162,    enable spark7162),
	[case "${enableval}" in
		yes) SPARK7162=spark7162 ;;
	esac],[enable_spark7162=no])
AM_CONDITIONAL(ENABLE_SPARK7162,test "$enable_spark7162" = "yes")
AC_SUBST(SPARK7162)

AC_ARG_ENABLE(e2pd0,
	AS_HELP_STRING(--enable-e2pd0,  enable enigma2-pli-nigthly diff0 ),
	[case "${enableval}" in
		yes) E2PD0=e2pd0 ;;
	esac], [enable_e2pd0=no])
AM_CONDITIONAL(ENABLE_E2PD0,test "$enable_e2pd0" = "yes")
AC_SUBST(E2PD0)

AC_ARG_ENABLE(e2pd1,
	AS_HELP_STRING(--enable-e2pd1,  enable enigma2-pli-nigthly diff1 ),
	[case "${enableval}" in
		yes) E2PD1=e2pd1 ;;
	esac], [enable_e2pd1=no])
AM_CONDITIONAL(ENABLE_E2PD1,test "$enable_e2pd1" = "yes")
AC_SUBST(E2PD1)

AC_ARG_ENABLE(e2pd2,
	AS_HELP_STRING(--enable-e2pd2,  enable enigma2-pli-nigthly diff2 ),
	[case "${enableval}" in
		yes) E2PD2=e2pd2 ;;
	esac], [enable_e2pd2=no])
AM_CONDITIONAL(ENABLE_E2PD2,test "$enable_e2pd2" = "yes")
AC_SUBST(E2PD2)

AC_ARG_ENABLE(e2pd3,
	AS_HELP_STRING(--enable-e2pd3,  enable enigma2-pli-nigthly diff3 ),
	[case "${enableval}" in
		yes) E2PD3=e2pd3 ;;
	esac], [enable_e2pd3=no])
AM_CONDITIONAL(ENABLE_E2PD3,test "$enable_e2pd3" = "yes")
AC_SUBST(E2PD3)

AC_ARG_ENABLE(e2pd4,
	AS_HELP_STRING(--enable-e2pd4,  enable enigma2-pli-nigthly diff4 ),
	[case "${enableval}" in
		yes) E2PD4=e2pd4 ;;
	esac], [enable_e2pd4=no])
AM_CONDITIONAL(ENABLE_E2PD4,test "$enable_e2pd4" = "yes")
AC_SUBST(E2PD4)

AC_ARG_ENABLE(e2pd5,
	AS_HELP_STRING(--enable-e2pd5,  enable enigma2-pli-nigthly diff5 ),
	[case "${enableval}" in
		yes) E2PD5=e2pd5 ;;
	esac], [enable_e2pd5=no])
AM_CONDITIONAL(ENABLE_E2PD5,test "$enable_e2pd5" = "yes")
AC_SUBST(E2PD5)

AC_ARG_ENABLE(e2pd6,
	AS_HELP_STRING(--enable-e2pd6,  enable enigma2-pli-nigthly diff6 ),
	[case "${enableval}" in
		yes) E2PD6=e2pd6 ;;
	esac], [enable_e2pd6=no])
AM_CONDITIONAL(ENABLE_E2PD6,test "$enable_e2pd6" = "yes")
AC_SUBST(E2PD6)

AC_ARG_ENABLE(e2pd7,
	AS_HELP_STRING(--enable-e2pd7,  enable enigma2-pli-nigthly diff7 ),
	[case "${enableval}" in
		yes) E2PD7=e2pd7 ;;
	esac], [enable_e2pd7=no])
AM_CONDITIONAL(ENABLE_E2PD7,test "$enable_e2pd7" = "yes")
AC_SUBST(E2PD7)

AC_ARG_ENABLE(e2pd8,
	AS_HELP_STRING(--enable-e2pd8,  enable enigma2-pli-nigthly diff8 ),
	[case "${enableval}" in
		yes) E2PD8=e2pd8 ;;
	esac], [enable_e2pd8=no])
AM_CONDITIONAL(ENABLE_E2PD8,test "$enable_e2pd8" = "yes")
AC_SUBST(E2PD8)

AC_ARG_ENABLE(e2d0,
	AS_HELP_STRING(--enable-e2d0,  enable enigma2-nigthly diff0 ),
	[case "${enableval}" in
		yes) E2D0=e2d0 ;;
	esac], [enable_e2d0=no])
AM_CONDITIONAL(ENABLE_E2D0,test "$enable_e2d0" = "yes")
AC_SUBST(E2D0)

AC_ARG_ENABLE(e2d1,
	AS_HELP_STRING(--enable-e2d1,  enable enigma2-nigthly diff1 ),
	[case "${enableval}" in
		yes) E2D1=e2d1 ;;
	esac], [enable_e2d1=no])
AM_CONDITIONAL(ENABLE_E2D1,test "$enable_e2d1" = "yes")
AC_SUBST(E2D1)

AC_ARG_ENABLE(e2d2,
	AS_HELP_STRING(--enable-e2d2,  enable enigma2-nigthly diff2 ),
	[case "${enableval}" in
		yes) E2D2=e2d2 ;;
	esac], [enable_e2d2=no])
AM_CONDITIONAL(ENABLE_E2D2,test "$enable_e2d2" = "yes")
AC_SUBST(E2D2)

AC_ARG_ENABLE(e2d3,
	AS_HELP_STRING(--enable-e2d3,  enable enigma2-nigthly diff3 ),
	[case "${enableval}" in
		yes) E2D3=e2d3 ;;
	esac], [enable_e2d3=no])
AM_CONDITIONAL(ENABLE_E2D3,test "$enable_e2d3" = "yes")
AC_SUBST(E2D3)

AC_ARG_ENABLE(e2d4,
	AS_HELP_STRING(--enable-e2d4,  enable enigma2-nigthly diff4 ),
	[case "${enableval}" in
		yes) E2D4=e2d4 ;;
	esac], [enable_e2d4=no])
AM_CONDITIONAL(ENABLE_E2D4,test "$enable_e2d4" = "yes")
AC_SUBST(E2D4)

AC_ARG_ENABLE(e2d5,
	AS_HELP_STRING(--enable-e2d5,  enable enigma2-nigthly diff5 ),
	[case "${enableval}" in
		yes) E2D5=e2d5 ;;
	esac], [enable_e2d5=no])
AM_CONDITIONAL(ENABLE_E2D5,test "$enable_e2d5" = "yes")
AC_SUBST(E2D5)

AC_ARG_ENABLE(e2d6,
	AS_HELP_STRING(--enable-e2d6,  enable enigma2-nigthly diff6 ),
	[case "${enableval}" in
		yes) E2D6=e2d6 ;;
	esac], [enable_e2d6=no])
AM_CONDITIONAL(ENABLE_E2D6,test "$enable_e2d6" = "yes")
AC_SUBST(E2D6)

AC_ARG_ENABLE(e2d7,
	AS_HELP_STRING(--enable-e2d7,  enable enigma2-nigthly diff7 ),
	[case "${enableval}" in
		yes) E2D7=e2d7 ;;
	esac], [enable_e2d7=no])
AM_CONDITIONAL(ENABLE_E2D7,test "$enable_e2d7" = "yes")
AC_SUBST(E2D7)

AC_ARG_ENABLE(e2d8,
	AS_HELP_STRING(--enable-e2d8,  enable enigma2-nigthly diff8 ),
	[case "${enableval}" in
		yes) E2D8=e2d8 ;;
	esac], [enable_e2d8=no])
AM_CONDITIONAL(ENABLE_E2D8,test "$enable_e2d8" = "yes")
AC_SUBST(E2D8)

AC_ARG_ENABLE(xbd0,
	AS_HELP_STRING(--enable-xbd0,  enable xbmc-nigthly diff0 ),
	[case "${enableval}" in
		yes) XBD0=xbd0 ;;
	esac], [enable_xbd0=no])
AM_CONDITIONAL(ENABLE_XBD0,test "$enable_xbd0" = "yes")
AC_SUBST(XBD0)

AC_ARG_ENABLE(xbd1,
	AS_HELP_STRING(--enable-xbd1,  enable xbmc-nigthly diff1 ),
	[case "${enableval}" in
		yes) XBD1=xbd1 ;;
	esac], [enable_xbd1=no])
AM_CONDITIONAL(ENABLE_XBD1,test "$enable_xbd1" = "yes")
AC_SUBST(XBD1)

AC_ARG_ENABLE(xbd2,
	AS_HELP_STRING(--enable-xbd2,  enable xbmc-nigthly diff2 ),
	[case "${enableval}" in
		yes) XBD2=xbd2 ;;
	esac], [enable_xbd2=no])
AM_CONDITIONAL(ENABLE_XBD2,test "$enable_xbd2" = "yes")
AC_SUBST(XBD2)

AC_ARG_ENABLE(xbd3,
	AS_HELP_STRING(--enable-xbd3,  enable xbmc-nigthly diff3 ),
	[case "${enableval}" in
		yes) XBD3=xbd3 ;;
	esac], [enable_xbd3=no])
AM_CONDITIONAL(ENABLE_XBD3,test "$enable_xbd3" = "yes")
AC_SUBST(XBD3)

AC_ARG_ENABLE(xbd4,
	AS_HELP_STRING(--enable-xbd4,  enable xbmc-nigthly diff4 ),
	[case "${enableval}" in
		yes) XBD2=xbd4 ;;
	esac], [enable_xbd4=no])
AM_CONDITIONAL(ENABLE_XBD4,test "$enable_xbd4" = "yes")
AC_SUBST(XBD4)

AC_ARG_ENABLE(nhd0,
	AS_HELP_STRING(--enable-nhd0,  enable neutrino-hd-nigthly diff0 ),
	[case "${enableval}" in
		yes) NHD0=nhd0 ;;
	esac], [enable_nhd0=no])
AM_CONDITIONAL(ENABLE_NHD0,test "$enable_nhd0" = "yes")
AC_SUBST(NHD0)

AC_ARG_ENABLE(nhd1,
	AS_HELP_STRING(--enable-nhd1,  enable neutrino-hd-nigthly diff1 ),
	[case "${enableval}" in
		yes) NHD1=nhd1 ;;
	esac], [enable_nhd1=no])
AM_CONDITIONAL(ENABLE_NHD1,test "$enable_nhd1" = "yes")
AC_SUBST(NHD1)

AC_ARG_ENABLE(nhd2,
	AS_HELP_STRING(--enable-nhd2,  enable neutrino-hd-nigthly diff2 ),
	[case "${enableval}" in
		yes) NHD2=nhd2 ;;
	esac], [enable_nhd2=no])
AM_CONDITIONAL(ENABLE_NHD2,test "$enable_nhd2" = "yes")
AC_SUBST(NHD2)

AC_ARG_ENABLE(vdr1722,
	AS_HELP_STRING(--enable-vdr1722,    enable vdr-1.7.22 stuff),
	[case "${enableval}" in
		yes) VDR1722=vdr1722 ;;
	esac],[enable_vdr1722=no])
AM_CONDITIONAL(ENABLE_VDR1722,test "$enable_vdr1722" = "yes")
AC_SUBST(VDR1722)

AC_ARG_ENABLE(vdr1727,
	AS_HELP_STRING(--enable-vdr1727,    enable vdr-1.7.27 stuff),
	[case "${enableval}" in
		yes) VDR1722=vdr1727 ;;
	esac],[enable_vdr1727=no])
AM_CONDITIONAL(ENABLE_VDR1727,test "$enable_vdr1727" = "yes")
AC_SUBST(VDR1727)

AC_SUBST(CFLAGS)
AC_SUBST(TARGET_CFLAGS)
AC_SUBST(TARGET_CXXFLAGS)
AC_SUBST(TARGET_LDFLAGS)

AC_PREFIX_DEFAULT(/ufs910)

if test "$prefix" = "NONE"; then
	prefix=/ufs910
fi

AC_ARG_WITH(targetprefix,
	[  --with-targetprefix=DIR prefix for target files [[PREFIX/cdkroot]]],
	[targetprefix="$with_targetprefix"],[targetprefix="${prefix}/cdkroot"])

AC_ARG_WITH(hostprefix,
	[  --with-hostprefix=DIR   prefix for host files [[PREFIX/host]]],
	[hostprefix="$with_hostprefix"],[hostprefix="${prefix}/host"])

AC_ARG_WITH(bootprefix,
	[  --with-bootprefix=DIR   prefix for boot files [[PREFIX/cdkroot-tftpboot]]],
	[bootprefix="$with_bootprefix"],[bootprefix="${prefix}/cdkroot-tftpboot"])

AC_ARG_WITH(serversupport,
	[  --with-serversupport=DIR  prefix for server file templates [[PREFIX/serversupport]]],
	[serversupport="$with_serversupport"],[serversupport="${prefix}/serversupport"])

AC_ARG_WITH(customizationsdir,
	[  --with-customizationsdir=DIR  optional directory containing customization scripts [[[CVS]]]],
	[customizationsdir="$with_customizationsdir"],[customizationsdir="`pwd`"])

AC_ARG_WITH(updatehttpprefix,
	[  --with-updatehttpprefix=URL  optional URL containing the URL of a directory with update images [[NONE]]],
	[updatehttpprefix="$with_updatehttpprefix"],[updatehttpprefix=])

buildprefix=`pwd`
AC_SUBST(targetprefix)
AC_SUBST(hostprefix)
AC_SUBST(buildprefix)
AC_SUBST(bootprefix)
AC_SUBST(serversupport)
AC_SUBST(customizationsdir)
AC_SUBST(updatehttpprefix)

AC_ARG_WITH(checkImage,
	[  --with-checkImage=[[none,rename,warn]]	How/if to invoke checkImage [[none]]],
	[CHECKIMAGE_BEHAVIOR="$withval"],[CHECKIMAGE_BEHAVIOR="true"])
if [[ "$withval" = "rename" ]] ; then
	TUXBOX_CHECKIMAGE='$(hostprefix)/bin/checkImage $@ || mv $@ $@_bad'
elif [[ "$withval" = "warn" ]] ; then
	TUXBOX_CHECKIMAGE='rm -f $@_bad; $(hostprefix)/bin/checkImage $@ || touch $@_bad'
else
	TUXBOX_CHECKIMAGE=@true
fi
AC_SUBST(TUXBOX_CHECKIMAGE)

AC_ARG_WITH(archivedir,
	[  --with-archivedir=DIR   where to store downloaded files [[Archive/]]],
	[archivedir="$with_archivedir"],[archivedir="$buildprefix/Archive"])

AC_ARG_WITH(cvsdir,
	[  --with-cvsdir=DIR       where to find the cvs],
	[cvsdir="$with_cvsdir"],[cvsdir="NONE"])

AC_ARG_WITH(appsdir,
	[  --with-appsdir=DIR      apps dir from cvs [[[CVS/]apps/]]],
	[appsdir="$with_appsdir"],[appsdir="NONE"])

AC_ARG_WITH(bootdir,
	[  --with-bootdir=DIR      boot dir from cvs [[[CVS/]boot/]]],
	[bootdir="$with_bootdir"],[bootdir="NONE"])

AC_ARG_WITH(driverdir,
	[  --with-driverdir=DIR    driver dir from cvs [[[CVS/]driver]]],
	[driverdir="$with_driverdir"],[driverdir="NONE"])

AC_ARG_WITH(hostappsdir,
	[  --with-hostappsdir=DIR  hostapps dir from cvs [[[CVS/]hostapps]]],
	[hostappsdir="$with_hostappsdir"],[hostappsdir="NONE"])

AC_ARG_WITH(gnuserver,
	[  --with-gnuserver=ADDRESS   the gnu server for gnu-stuff (without ftp://)],
	[gnuserver="$with_gnuserver"],[gnuserver=ftp.gwdg.de/pub/misc/gnu/ftp/gnu])

AC_ARG_WITH(defaultserver,
	[  --with-defaultserver=ADDRESS   the server that is taken if no server is given/works (without http://)],
	[defaultserver="$with_defaultserver"],[defaultserver="NONE"])

if test "$cvsdir" = "NONE"; then
	if test "$appsdir" = "NONE"; then
		appsdir="$buildprefix/apps"
	fi
	if test "$bootdir" = "NONE"; then
		bootdir="$buildprefix/boot"
	fi
	if test "$driverdir" = "NONE"; then
		driverdir="$buildprefix/driver"
	fi
	if test "$hostappsdir" = "NONE"; then
		hostappsdir="$buildprefix/hostapps"
	fi
else
	if test "$appsdir" = "NONE"; then
		appsdir="$cvsdir/apps"
	fi
	if test "$bootdir" = "NONE"; then
		bootdir="$cvsdir/boot"
	fi
	if test "$driverdir" = "NONE"; then
		driverdir="$cvsdir/driver"
	fi
	if test "$hostappsdir" = "NONE"; then
		hostappsdir="$cvsdir/hostapps"
	fi
fi

if test "$defaultserver" = "NONE"; then
	defaultserver=""
fi

dircheck="ok"
AC_MSG_CHECKING([for apps directory])
if test ! -f "$appsdir/acinclude.m4" ; then
	AC_MSG_WARN([appsdir $appsdir not found])
	appsdir="missing_appsdir"
	dircheck="fail"
else
	AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([for boot directory])
if test ! -d "$bootdir/u-boot-tufsbox" ; then
	AC_MSG_WARN([bootdir $bootdir not found])
	bootdir="missing_bootdir"
	dircheck="fail"
else
	AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([for driver directory])
if test ! -f "$driverdir/Makefile" ; then
	AC_MSG_WARN([driverdir $driverdir not found])
	driverdir="missing_driverdir"
	dircheck="fail"
else
	AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([for hostapps directory])
if test ! -f "$hostappsdir/configure.ac" ; then
	AC_MSG_WARN([hostappsdir $hostappsdir not found])
	hostappsdir="missing_hostappsdir"
	dircheck="fail"
else
	AC_MSG_RESULT([yes])
fi

AC_SUBST(appsdir)
AC_SUBST(bootdir)
AC_SUBST(driverdir)
AC_SUBST(hostappsdir)
AC_SUBST(gnuserver)
AC_SUBST(defaultserver)
AC_SUBST(archivedir)

AC_PATH_PROG(M4,m4,no)
if test "$M4" = "no"; then
	AC_MSG_WARN(No m4 found)
fi

AC_PATH_PROG(BZIP2,bzip2,no)
if test "$BZIP2" = "no"; then
	AC_MSG_WARN(No bzip2 found)
fi

AC_PATH_PROG(MAKEINFO,makeinfo,no)
if test "$MAKEINFO" = "no"; then
	AC_MSG_WARN(No makeinfo found)
fi

AC_PROG_CXX
if test "$CXX" = "g++" -a "$GXX" != "yes"; then
	AC_MSG_ERROR(No g++ found)
fi

AC_PROG_LEX
if test "$LEX" != "flex"; then
	AC_MSG_ERROR(No flex found)
fi

AC_PROG_YACC
if test "$YACC" != "bison -y"; then
	AC_MSG_ERROR(No bison found)
fi

if test "$enable_ccache" = "yes"; then
	AC_PATH_PROG(CCACHE,ccache,no)
	if test "$CCACHE" = "no"; then
		AC_MSG_WARN(No ccache found)
		CCACHE=$hostprefix/bin/ccache
	fi
fi

FONTDIR="/share/fonts"
AC_SUBST(FONTDIR)

CLEANUP="rm -rf"
AC_SUBST(CLEANUP)

DEPSCLEANUP="rm -f"
AC_SUBST(DEPSCLEANUP)

RPMDEPSCLEANUP="rm -f"
AC_SUBST(RPMDEPSCLEANUP)

DISTCLEANUP="rm -rf"
AC_SUBST(DISTCLEANUP)

#
# core
#
AC_CONFIG_FILES([smart-rules])
AC_OUTPUT

mkdir ${srcdir}/ruledir
rm -f  ${srcdir}/ruledir/* 
${srcdir}/smart-rules.pl ${srcdir}/smart-rules
if test "$?" != "0"; then
	AC_MSG_ERROR(smart-rule pareser failed)
fi

AC_SUBST(KERNELVERSION)
AC_SUBST(KERNELSTMLABEL)
AC_SUBST(KERNELLABEL)
TUXBOX_RULES_MAKE(linux24)
TUXBOX_RULES_MAKE(linuxp0207)
TUXBOX_RULES_MAKE(linuxp0209)
TUXBOX_RULES_MAKE(linuxp0210)
TUXBOX_RULES_MAKE(linuxp0211)

if test "$enable_stm24" = "yes"; then
	if test "$enable_p0209" == "yes"; then
		KERNELVERSION=${VERSION_linuxp0209}
		KERNELSTMLABEL="_${VERSION_linuxp0209#*_}"
		KERNELLABEL="209"
	elif test "$enable_p0210" == "yes"; then
		KERNELVERSION=${VERSION_linuxp0210}
		KERNELSTMLABEL="_${VERSION_linuxp0210#*_}"
		KERNELLABEL="210"
	elif test "$enable_p0211" == "yes"; then
		KERNELVERSION=${VERSION_linuxp0211}
		KERNELSTMLABEL="_${VERSION_linuxp0211#*_}"
		KERNELLABEL="211"
	elif test "$enable_p0207" == "yes"; then
		KERNELVERSION=${VERSION_linuxp0207}
		KERNELSTMLABEL="_${VERSION_linuxp0207#*_}"
		KERNELLABEL="207"
	else
		KERNELVERSION=${VERSION_linuxp0210}
		KERNELSTMLABEL="_${VERSION_linuxp0210#*_}"
		KERNELLABEL="210"
	fi
fi

AC_SUBST(EXTERNALLCD_DEP)

if test "$enable_externallcd" == "yes"; then
	EXTERNALLCD="yes"
	EXTERNALLCD_DEP="graphlcd"
else
	EXTERNALLCD="no"
	EXTERNALLCD_DEP=""
fi

AC_SUBST(MEDIAFW)
AC_SUBST(MEDIAFW_DEP)

if test "$enable_mediafwgstreamer" == "yes"; then
	MEDIAFW="gstreamer"
	MEDIAFW_DEP="gst_plugins_dvbmediasink"
else
	MEDIAFW="eplayer3"
	MEDIAFW_DEP="ffmpeg"
fi

AC_SUBST(GRAPHICFW)
AC_SUBST(GRAPHICFW_DEP)

if test "$enable_graphicfwdirectfb" == "yes"; then
	GRAPHICFW="directfb"
	GRAPHICFW_DEP="directfb"
else
	GRAPHICFW="framebuffer"
	GRAPHICFW_DEP=""
fi


#TUXBOX_RULES_MAKE_EXDIR(binutils)
#TUXBOX_RULES_MAKE_EXDIR(bootstrap_gcc)
#TUXBOX_RULES_MAKE_EXDIR(glibc)
#TUXBOX_RULES_MAKE_EXDIR(gcc)
#TUXBOX_RULES_MAKE(uclibc)

#
# core
#
TUXBOX_RULES_MAKE(squashfs)
TUXBOX_RULES_MAKE(ccache)
TUXBOX_RULES_MAKE(cramfs)
TUXBOX_RULES_MAKE(ipkg_utils)
TUXBOX_RULES_MAKE(host_python)
TUXBOX_RULES_MAKE(libtool)

#
# root
#
TUXBOX_RULES_MAKE(busybox)
TUXBOX_RULES_MAKE(lsb)
#TUXBOX_RULES_MAKE(ipkg)
TUXBOX_RULES_MAKE(module_init_tools)
TUXBOX_RULES_MAKE(sysvinit)
TUXBOX_RULES_MAKE(init_scripts)
TUXBOX_RULES_MAKE(init_scripts_xbmc)
TUXBOX_RULES_MAKE_RPM(udev)
TUXBOX_RULES_MAKE_RPM(udev_rules)

#
# net apps
#
TUXBOX_RULES_MAKE(portmap)
TUXBOX_RULES_MAKE(nfs_utils)
TUXBOX_RULES_MAKE(vsftpd)
TUXBOX_RULES_MAKE(netkit_ftp)
TUXBOX_RULES_MAKE(samba)
TUXBOX_RULES_MAKE(netio)
TUXBOX_RULES_MAKE(lighttpd)
TUXBOX_RULES_MAKE(wireless_tools)
TUXBOX_RULES_MAKE(zd1211)
TUXBOX_RULES_MAKE(wpa_supplicant)
TUXBOX_RULES_MAKE(ethtool)
TUXBOX_RULES_MAKE(modem_scripts)

#
# contrib apps
#
TUXBOX_RULES_MAKE(bzip2)
TUXBOX_RULES_MAKE(grep)
TUXBOX_RULES_MAKE(openrdate)
TUXBOX_RULES_MAKE(e2fsprogs)
TUXBOX_RULES_MAKE(xfsprogs)
TUXBOX_RULES_MAKE(mc)
TUXBOX_RULES_MAKE(sdparm)
TUXBOX_RULES_MAKE(sg3_utils)
TUXBOX_RULES_MAKE(console_data)
TUXBOX_RULES_MAKE(nano)
TUXBOX_RULES_MAKE(rsync)
TUXBOX_RULES_MAKE(rfkill)
TUXBOX_RULES_MAKE(lm_sensors)
TUXBOX_RULES_MAKE(fuse)
TUXBOX_RULES_MAKE(curlftpfs)
TUXBOX_RULES_MAKE(fbset)
TUXBOX_RULES_MAKE(pngquant)
TUXBOX_RULES_MAKE(mplayer)
TUXBOX_RULES_MAKE(mencoder)
TUXBOX_RULES_MAKE(util_linux)
TUXBOX_RULES_MAKE(jfsutils)
TUXBOX_RULES_MAKE(opkg)
TUXBOX_RULES_MAKE(opkg_host)
TUXBOX_RULES_MAKE(pppd)
TUXBOX_RULES_MAKE(usb_modeswitch)
TUXBOX_RULES_MAKE(usb_modeswitch_data)
TUXBOX_RULES_MAKE(ntfs_3g)
TUXBOX_RULES_MAKE(sysstat)
TUXBOX_RULES_MAKE(hotplug_e2)
TUXBOX_RULES_MAKE(autofs)
TUXBOX_RULES_MAKE(imagemagick)
TUXBOX_RULES_MAKE(grab)
TUXBOX_RULES_MAKE(oscam)

#
# contrib apps with smart rules
#
TUXBOX_RULES_MAKE(ntpclient)
TUXBOX_RULES_MAKE(udpxy)
#
# contrib libs
#
TUXBOX_RULES_MAKE(libboost)
TUXBOX_RULES_MAKE(ncurses)
TUXBOX_RULES_MAKE(libz)
TUXBOX_RULES_MAKE(libreadline)
TUXBOX_RULES_MAKE(freetype_old)
TUXBOX_RULES_MAKE(freetype)
TUXBOX_RULES_MAKE(lirc)
TUXBOX_RULES_MAKE(jpeg)
TUXBOX_RULES_MAKE(libjpeg6b)
TUXBOX_RULES_MAKE(libpng)
TUXBOX_RULES_MAKE(libpng12)
TUXBOX_RULES_MAKE(libungif)
TUXBOX_RULES_MAKE(libgif)
TUXBOX_RULES_MAKE(curl)
TUXBOX_RULES_MAKE(libfribidi)
TUXBOX_RULES_MAKE(libsigc)
TUXBOX_RULES_MAKE(libmad)
TUXBOX_RULES_MAKE(libid3tag)
TUXBOX_RULES_MAKE(libvorbisidec)
TUXBOX_RULES_MAKE(glib2)
TUXBOX_RULES_MAKE(libiconv)
TUXBOX_RULES_MAKE(libmng)
TUXBOX_RULES_MAKE(lcms)
TUXBOX_RULES_MAKE(openssl)
TUXBOX_RULES_MAKE(directfb)
TUXBOX_RULES_MAKE(dfbpp)
TUXBOX_RULES_MAKE(libstgles)
TUXBOX_RULES_MAKE(expat)
TUXBOX_RULES_MAKE(fontconfig)
TUXBOX_RULES_MAKE(libxmlccwrap)
TUXBOX_RULES_MAKE(a52dec)
TUXBOX_RULES_MAKE(libdvdcss)
TUXBOX_RULES_MAKE(libdvdnav)
TUXBOX_RULES_MAKE(libdvdread)
TUXBOX_RULES_MAKE(ffmpeg)
TUXBOX_RULES_MAKE(libass)
TUXBOX_RULES_MAKE(webkitdfb)
TUXBOX_RULES_MAKE(icu4c)
TUXBOX_RULES_MAKE(enchant)
TUXBOX_RULES_MAKE(lite)
TUXBOX_RULES_MAKE(sqlite)
TUXBOX_RULES_MAKE(libsoup)
TUXBOX_RULES_MAKE(pixman)
TUXBOX_RULES_MAKE(cairo)
TUXBOX_RULES_MAKE(libogg)
TUXBOX_RULES_MAKE(libflac)
TUXBOX_RULES_MAKE(libcap)
TUXBOX_RULES_MAKE(evebrowser)
TUXBOX_RULES_MAKE(brofs)
TUXBOX_RULES_MAKE(libalsa)
TUXBOX_RULES_MAKE(rtmpdump)
TUXBOX_RULES_MAKE(libdvbsipp)
TUXBOX_RULES_MAKE(libdreamdvd)
TUXBOX_RULES_MAKE(libdreamdvd2)
TUXBOX_RULES_MAKE(libmpeg2)
TUXBOX_RULES_MAKE(libsamplerate)
TUXBOX_RULES_MAKE(libvorbis)
TUXBOX_RULES_MAKE(libmodplug)
TUXBOX_RULES_MAKE(tiff)
TUXBOX_RULES_MAKE(lzo)
TUXBOX_RULES_MAKE(yajl)
TUXBOX_RULES_MAKE(libpcre)
TUXBOX_RULES_MAKE(libcdio)
TUXBOX_RULES_MAKE(jasper)
TUXBOX_RULES_MAKE(mysql)
TUXBOX_RULES_MAKE(xupnpd)
TUXBOX_RULES_MAKE(libmicrohttpd)
TUXBOX_RULES_MAKE(libexif)
TUXBOX_RULES_MAKE(minidlna)
TUXBOX_RULES_MAKE(vlc)
TUXBOX_RULES_MAKE(djmount)
TUXBOX_RULES_MAKE(libupnp)
TUXBOX_RULES_MAKE(rarfs)
TUXBOX_RULES_MAKE(sshfs)
TUXBOX_RULES_MAKE(gmediarender)
TUXBOX_RULES_MAKE(mediatomb)
TUXBOX_RULES_MAKE(tinyxml)
TUXBOX_RULES_MAKE(libnfs)
TUXBOX_RULES_MAKE(taglib)

#
# python
#
TUXBOX_RULES_MAKE(elementtree)
TUXBOX_RULES_MAKE(libxml2)
TUXBOX_RULES_MAKE(libxslt)
TUXBOX_RULES_MAKE(lxml)
TUXBOX_RULES_MAKE(setuptools)
TUXBOX_RULES_MAKE(gdata)
TUXBOX_RULES_MAKE(twisted)
TUXBOX_RULES_MAKE(twistedweb2)
TUXBOX_RULES_MAKE(pilimaging)
TUXBOX_RULES_MAKE(python)
TUXBOX_RULES_MAKE(pyopenssl)
TUXBOX_RULES_MAKE(pycrypto)
TUXBOX_RULES_MAKE(pyusb)
TUXBOX_RULES_MAKE(pythonwifi)
TUXBOX_RULES_MAKE(pythoncheetah)
TUXBOX_RULES_MAKE(zope_interface)

#
# gstreamer
#
TUXBOX_RULES_MAKE(gstreamer)
TUXBOX_RULES_MAKE(gst_plugins_base)
TUXBOX_RULES_MAKE(gst_plugins_good)
TUXBOX_RULES_MAKE(gst_plugins_bad)
TUXBOX_RULES_MAKE(gst_plugins_ugly)
TUXBOX_RULES_MAKE(gst_ffmpeg)
TUXBOX_RULES_MAKE(gst_plugins_fluendo_mpegdemux)
TUXBOX_RULES_MAKE(gst_plugins_dvbmediasink)
TUXBOX_RULES_MAKE(gst_plugin_subsink)

#
# enigma2
#
TUXBOX_RULES_MAKE(enigma2_pli)
TUXBOX_RULES_MAKE(tuxtxtlib)
TUXBOX_RULES_MAKE(tuxtxt32bpp)
TUXBOX_RULES_MAKE(enigma2_networkbrowser)
TUXBOX_RULES_MAKE(enigma2_openwebif)
TUXBOX_RULES_MAKE(e2plugin)
TUXBOX_RULES_MAKE(e2skin)

#
# xbmc
#
TUXBOX_RULES_MAKE(xbmc_nightly)

#
# external lcd
#
TUXBOX_RULES_MAKE(graphlcd)
TUXBOX_RULES_MAKE(libusb)
TUXBOX_RULES_MAKE(libusb2)
TUXBOX_RULES_MAKE(libusbcompat)
TUXBOX_RULES_MAKE(libgd2)

#
# RPM stuff
#
configprefix=$prefix/config
crossprefix=$prefix/devkit/sh4
devkitprefix=$prefix/devkit
rpmdbprefix=${targetprefix}-rpmdb
kernelprefix=$buildprefix
AC_SUBST(crossprefix)
AC_SUBST(configprefix)
AC_SUBST(devkitprefix)
AC_SUBST(rpmdbprefix)
AC_SUBST(kernelprefix)

#
# localmacros
#
$INSTALL -d SOURCES SPECS BUILD SRPMS RPMS/{noarch,${host_arch},sh4}
test -f config && rm config || true
ln -sf $configprefix/rpm config || true
echo "%_topdir $buildprefix" >localmacros
echo "%_specdir %_topdir/SPECS" >>localmacros
echo "%_sourcedir %_topdir/SOURCES" >>localmacros
echo "%_builddir %_topdir/BUILD" >>localmacros
echo "%_buildrootdir %_topdir/BUILDROOT" >>localmacros
echo "%buildroot %_topdir/BUILDROOT/%{name}-%{version}-%{release}.${host_arch}" >>localmacros
echo "%_rpmdir %_topdir/RPMS" >>localmacros
echo "%_srcrpmdir %_topdir/SRPMS" >>localmacros
echo "%_stm_install_prefix $prefix/.." >>localmacros
echo "%_stm_base_prefix $prefix" >>localmacros
echo "%_stm_host_dir $hostprefix" >>localmacros
echo "%_stm_cross_dir $crossprefix" >>localmacros
echo "%_stm_config_dir $configprefix" >>localmacros
echo "%_stm_devkit_dir $devkitprefix" >>localmacros
echo "%_stm_cross_target_dir $targetprefix" >>localmacros
echo "%_stm_kernel_dir $kernelprefix" >>localmacros
echo "%_stm_sources_dir $kernelprefix" >>localmacros
echo "%_stm_host_arch ${host_arch}" >>localmacros
echo "%_stm_host_cpu ${host_cpu}" >>localmacros
echo "%_stm_host_config ${host_alias:-${host}}" >>localmacros
echo "%_dbpath $rpmdbprefix" >>localmacros
echo "%__bzip2 $BZIP2" >>localmacros
echo "%nohostbuilddeps 1" >> localmacros
echo "%_default_patch_fuzz 2" >> localmacros

# Determine how to pass options to rpm, depending on version and distribution
macrofiles="/usr/lib/rpm/macros:$configprefix/rpm/targets/sh4-linux:$configprefix/rpm/common:$buildprefix/localmacros"

RPMMAJOR=`rpm --version | awk '{print $NF}' | cut -d '.' -f 1`
RPMMINOR=`rpm --version | awk '{print $NF}' | cut -d '.' -f 2`

if test ${RPMMAJOR} -lt 4 -o ${RPMMAJOR} -eq 4 -a ${RPMMINOR} -lt 7 ; then
  # RPM < 4.7
  echo "macrofiles: ${macrofiles}" > localrc
  DRPMBUILD="--rcfile /usr/lib/rpm/rpmrc:localrc"
  DRPM=${DRPMBUILD}
else
  # RPM > 4.7
  DRPMBUILD="--macros ${macrofiles}"
  case `lsb_release -s -i` in
    Ubuntu* | Debian* ) DRPM="--force-debian ${DRPMBUILD}" ;;
    *) DRPM=${DRPMBUILD} ;;
  esac
fi

AC_SUBST(DRPM)
AC_SUBST(DRPMBUILD)

#
# internal
#


AC_SUBST(DOWNLOAD_FOR_SMART)
AC_SUBST(SMART_DOWNLOAD_RULES)
AM_SUBST_NOTMAKE(SMART_DOWNLOAD_RULES)

#
# summary
#

AC_MSG_RESULT([
summary:
-------------------------------------------------------------------------------
target cpu                  : $CPU_MODEL
linux kernel                : ${KERNELVERSION%.*}
kernelversion               : $KERNELVERSION
localversion                : $KERNELSTMLABEL
STLinux 2.4                 : $enable_stm24
Patchlevel P0207            : $enable_p0207
Patchlevel P0209            : $enable_p0209
Patchlevel P0210            : $enable_p0210
Patchlevel P0211            : $enable_p0211
vdr VDR 1.7.22              : $enable_vdr1722
vdr VDR 1.7.27              : $enable_vdr1727
ccache                      : $enable_ccache
target prefix               : $targetprefix
boot prefix                 : $bootprefix
host prefix                 : $hostprefix
cross prefix                : $crossprefix
build prefix                : $buildprefix
root partition size         : $ROOT_PARTITION_SIZE
data partition size         : $DATA_PARTITION_SIZE
serversupport               : $serversupport
checkImage                  : $CHECKIMAGE_BEHAVIOR
target apps directory       : $appsdir
boot directory              : $bootdir
driver directory            : $driverdir
host apps directory         : $hostappsdir
customization directory     : $customizationsdir
archive directory           : $archivedir
spider-box hl101 stuff      : $enable_hl101
spark box stuff             : $enable_spark
spark7162 box stuff         : $enable_spark7162
XFS support for IDE         : $enable_xfs
NFS server                  : $enable_nfsserver
Samba Clients               : $enable_cifs
NTFS support for IDE        : $enable_ntfs
sg3 utils                   : $enable_sg3
DEBUG                       : $enable_debug
Player179                   : $enable_player179
Player191                   : $enable_player191
Multicom322                 : $enable_multicom322
Multicom324                 : $enable_multicom324
MediaFw Gstreamer           : $enable_mediafwgstreamer
MediaFw                     : $MEDIAFW
MediaFw Dep                 : $MEDIAFW_DEP
GraphicFw DirectFB          : $enable_graphicfwdirectfb
GraphicFw                   : $GRAPHICFW
GraphicFw Dep               : $GRAPHICFW_DEP
EXTERNALLCD                 : $enable_externallcd
EXTERNALLCD_DEP             : $EXTERNALLCD_DEP
])

if test "$dircheck" = "fail"; then
AC_MSG_RESULT([
******************************************************************
*                       !!!WARNING!!!                            *
* one or more of your CVS source directories could not be found, *
* (for details see above), did you maybe supply an incorrect     *
*  --with-cvsdir argument to configure?                          *
*                       !!!WARNING!!!                            *
******************************************************************
])
fi

TUXBOX_CUSTOMIZE='[[ -x $(customizationsdir)/$(notdir $@)-local.sh ] && KERNELVERSION=$(KERNELVERSION) && $(customizationsdir)/$(notdir $@)-local.sh $(buildprefix) || true]'
AC_SUBST(TUXBOX_CUSTOMIZE)
TUXBOX_TOUCH='[@[ "x$*" = "x" ] && touch $@ || true]'
AC_SUBST(TUXBOX_TOUCH)

AC_CONFIG_FILES([
Makefile
])

# AC_CONFIG_COMMANDS([rules-downcheck-chmod],[chmod +x rules-downcheck.pl])

AC_OUTPUT
